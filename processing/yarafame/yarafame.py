import os

try:
    import yara
    HAVE_YARA = True
except ImportError:
    HAVE_YARA = False

from fame.common.utils import list_value, tempdir
from fame.common.exceptions import ModuleInitializationError, ModuleExecutionError
from fame.core.module import ProcessingModule

class YaraFame(ProcessingModule):
    name = "yarafame"
    description = "Run Yara rules on files."
    acts_on = ["unpacked_executable", "eml"]

    config = [
        {
            "name": "rules",
            "type": "text",
            "description": 'YARA rules file that will be used.',
        },
        {
            "name": "ignored_rules",
            "type": "str",
            "default": "",
            "description": "Comma-delimited list of rule names that will be ignored.",
        },
    ]

    def initialize(self):
        # Check dependencies
        if not HAVE_YARA:
            raise ModuleInitializationError(self, "Missing dependency: yara")

        self.results = []

    def yaracallback(self, data):
        if data['rule'] not in self.ignored_rules:

            try:
                self.add_probable_name(data['meta']['attribution'].lower())
            except:
                pass

            sig = dict()
            sig['name'] = data['rule']
            try:
                sig['description'] = data['meta']['description']
            except:
                sig['description'] = ""

            sig['tags'] = []
            for tag in data['tags']:
                sig['tags'].append(tag.lower())

            self.results.append(sig)

        self.log("debug", "{}".format(data))
        return yara.CALLBACK_CONTINUE

    def each(self, target):
        self.ignored_rules = list_value(self.ignored_rules)
        # Create file containing rules
        tmpdir = tempdir()
        rules_path = os.path.join(tmpdir, "rules")
        rules_file = open(rules_path, "w")
        rules_file.write(self.rules)
        rules_file.close()

        try:
            yara_rules = yara.compile(rules_path)
            matches = yara_rules.match(target, callback=self.yaracallback, which_callbacks=yara.CALLBACK_MATCHES)
        except Exception as error:
            self.log("debug", "{}".format(error))

        return True



